with AFDX.Table.Virtual_Links;
with AFDX.Table.Ports;
with AFDX.Definitions;

with AFDX.Out_Buffers.Dispatcher;
with AFDX.In_Buffers;

use AFDX.Table;


package AFDX.System is

   Not_Ready    : exception;

   Overflow     : exception renames AFDX.Overflow;
   --Underflow    : exception renames AFDX.Underflow;
   Invalid_Virtual_Link     : exception;
   Invalid_Sub_Virtual_Link : exception;

   Invalid_Port : exception;


   type Virtual_Link_ID     is new Virtual_Links.ID_Range;
   type Sub_Virtual_Link_ID is new Virtual_Links.Sub_Virtual_Link_Range;

   type Port_ID   is new Ports.ID_Range;
   type Port_Type is new Ports.Port_Type;


   type Socket is abstract tagged private;
   type Socket_Acc is access all Socket'Class;

   type Send_Socket is new Socket with private;
   type Send_Socket_Acc is access all Send_Socket'Class;

   procedure Initialize -- raises Invalid_Port
     (This             :    out Send_Socket;
      Virtual_Link     : in     Virtual_Link_ID;
      Sub_Virtual_Link : in     Sub_Virtual_Link_ID;
      Destination_Port : in     Port_ID;
      Source_Port      : in     Port_ID);

   procedure Send -- raises Overflow, Not_Ready
     (This    : in out Send_Socket;
      Message : in     Stream_Element_Array);


   type Receive_Socket is  new Socket with private;
   type Receive_Socket_Acc is access all Send_Socket'Class;

   procedure Initialize
     (This         :    out Receive_Socket;
      Virtual_Link : in     Virtual_Link_ID;
      Port         : in     Port_ID;
      Mode         : in     Port_Type;
      Is_Blocking  : in     Boolean := False);


   procedure Receive -- raises Overflow
     (This      : in     Receive_Socket;
      Message   :    out Stream_Element_Array;
      Length    :    out Stream_Element_Count;
      Freshness :    out Time);

private

   type Socket is abstract tagged
      record
         Is_Ready    : Boolean := False;
      end record;

   type Send_Socket is new Socket with
      record
         Event            : AFDX.Out_Buffers.Dispatcher.Object_Acc;
         Source_Port      : Ports.ID_Range;
         Destination_Port : Ports.ID_Range;
         Sub_Virtual_Link : Virtual_Links.Sub_Virtual_Link_Range;
      end record;


   type Receive_Socket is new Socket with
      record
         Is_Blocking : Boolean := True;
         Buffer      : AFDX.In_Buffers.Object_Acc;
      end record;

end AFDX.System;
